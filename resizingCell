/*
* version 1.0 2013-11-29
* Requires jQuery v1.4.2 or later
* Dual licensed under the MIT and GPL licenses:
* http://www.opensource.org/licenses/mit-license.php
* http://www.gnu.org/licenses/gpl.html
* Authors: Damon Jung
*/
; (function ($) {
    $.fn.resizingCell = function (options) {
        return this.each(function () {			
            var settings = $.extend({
                selector: options.selector ? options.selector : 'td',
                thick: options.thick ? options.thick : 9,
                color: options.color ? options.color : 'transparent'
            }, options);
            
            // DJ 
			      // false = resizing is off.
			      // true = resizing is on.
            var resizingStatus = false;

            // DJ : Set iframe, body area, plain javascript, jQuery object
            var parentElement = {
                JavaScript      :   this,
                Jquery          :   $(this),
                Contents        :   $(this).contents().find('body'),
                Header          :   $(this).contents().find('head'),
                IframeOffset    :   $(this).offset(),
                BodyOffset      :   $(this).contents().find('body').offset(),
                Editor          :   $(tinymce.activeEditor.editorContainer)
            };
            
            // DJ : Resizing hanlder model.
			      // Set jQuery object to selector and id to id.
            var attachedHandler = {
                eHandler : {
                    selector    :   undefined,
                    id          :   undefined
                },
                nHandler : {
                    selector    :   undefined,
                    id          :   undefined
                }
            };

            // DJ : Selected element
            var selectedElement;			
			      // DJ : X, Y coordinates.
            var originalX, originalY;
            
            // DJ : This value is for centered position of resize handlers.
            var leverage = settings.thick / 2;
			      
		        // DJ : Function group
            var methods = {
                // Updating changed value on target elements.
                fixedValue: function(selectedElement, tableElement) {                    
                    if ( $(tableElement).attr('fixed') != 'true' ) {
                        $(tableElement).find(settings.selector).each(function(index, td) {
                            var w = $(td).width(),
    							          h = $(td).height();
							
                            $(td).css('width', w).css('height', h);
                            $(td).attr('resize-width', w + 'px').attr('resize-height', h + 'px');
                            $(td).attr('data-mce-style', 'width:' + w + 'px; ' + 'height:' + h + 'px; ' + 'border: 1px solid black; border-top: 0; border-right: 0;');
                        });
                        $(tableElement).attr('fixed', 'true');
                        $(tableElement).css('width', $(tableElement).outerWidth()).attr('data-mce-style', 'width:' + $(tableElement).outerWidth() + 'px;').attr('width', $(tableElement).outerWidth());
                        $(tableElement).css('height', 'auto').attr('data-mce-style', 'height:auto').attr('height', 'auto');
                        parentElement.Contents.css('padding-bottom', '50px');
                    };
                },

                // DJ : Invoke handlers generating method.
                // Improve me !! getContents has now no more than invoking attachHandler function.
                // Improve me !! If possible, get rid of getContents and just call attachHandler.
                getContents: function(parentElement, selector) {
                    selectedElement = $(selector);
                    methods.attachHandler(selectedElement, selector.offsetParent);
                },

                // DJ : Create handlers and attach them.
                attachHandler: function(selectedElement, tableElement) {
                    if ( parentElement.Contents.find(attachedHandler.eHandler.id).length == 0 ) {
                        if ( attachedHandler.eHandler.selector != undefined || attachedHandler.nHandler.selector != undefined ) {
                            attachedHandler.eHandler.selector.remove();
                            attachedHandler.nHandler.selector.remove();
                        }
                        var eHandler = $('<div id="horizontalResize"></div>');
                        var nHandler = $('<div id="verticalResize"></div>');
                        var position = selectedElement.offset();
                        var dimension = { 
                            width : selectedElement.outerWidth(),
                            height : selectedElement.outerHeight()
                        };          
                        attachedHandler = {
                            eHandler : {
                                selector : eHandler,
                                id : '#'+eHandler.attr('id')
                            },
                            nHandler : {
                                selector : nHandler,
                                id : '#'+nHandler.attr('id')
                            }
                        };

                        if ( $.getInternetVersion() == "8" ) {
                            eHandler.attr('unselectable', 'on');
                            nHandler.attr('unselectable', 'on');
                        }

                        eHandler.appendTo(parentElement.Contents).css('position', 'absolute').css('top', position.top).css('left', position.left + dimension.width - leverage).css('height', dimension.height).css('width', settings.thick).css('cursor', 'e-resize').css('background-color', 'transparent')
                        .mousedown(function(e) {
                            if ( resizingStatus == false ) {
                                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                                originalX = e.pageX;
                                methods.resizeStart(attachedHandler, $(this));
                            }
                        }).mouseup(function(e) {
                            methods.applyChanges();
                            methods.resizeEnd(selectedElement);
                        }).mouseenter(function(e) {
                            parentElement.Contents.attr('contentEditable', false).css('cursor', 'e-resize');
                        }).mouseout(function(e) {
                            parentElement.Contents.attr('contentEditable', true).css('cursor', 'auto');
                        });
                        nHandler.appendTo(parentElement.Contents).css('position', 'absolute').css('top', position.top + dimension.height - leverage).css('left', position.left).css('height', settings.thick).css('width', dimension.width).css('cursor', 's-resize').css('background-color', 'transparent')
                        .mousedown(function(e) {
                            if ( resizingStatus == false ) {
                                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                                originalY = e.pageY;
                                methods.resizeStart(attachedHandler, $(this));
                            }
                        }).mouseup(function(e) {
                            methods.applyChanges();
                            methods.resizeEnd(selectedElement);
                        }).mouseenter(function(e) {
                            parentElement.Contents.attr('contentEditable', false).css('cursor', 's-resize');
                        }).mouseout(function(e) {
                            parentElement.Contents.attr('contentEditable', true).css('cursor', 'auto');
                        });
                    }
                },

                // DJ : Positioning handlers.
                positionHandler: function(selectedElement) {
                    if ( resizingStatus == false ) {
                        var position = selectedElement.offset();
                        var dimension = { 
                            width : selectedElement[0].clientWidth,
                            height : selectedElement[0].clientHeight
                        };
                        attachedHandler.eHandler.selector.css('top', position.top).css('left', position.left + dimension.width - leverage).css('height', dimension.height).css('width', settings.thick);
                        attachedHandler.nHandler.selector.css('top', position.top + dimension.height - leverage).css('left', position.left).css('height', settings.thick).css('width', dimension.width);
                    }
                },

                // DJ : resizing on process.
        				resizeStart: function(attachedHandler, currentHandler) {
        					resizingStatus = true;
                
                    var table = $(selectedElement.context.offsetParent);
                    var parent = selectedElement.parent();
                    var child = parent.find(settings.selector);
                    
                    // DJ : Recognize selectedElement is the last one on the right or not.
                    var isRight = selectedElement.next()[0] ? true : false;                    
                    var targetIndexing = 0;
                    var nextIndexing = 0;
                    var rowIndexing = 0;
                    var resizeTarget = [];
                    var nextTarget = [];
                    var rowTarget = [];
                    var sorted;
                    var selected;
                    var nextSelected;

                    // DJ : if an user trying to resize vertically
                    if ( currentHandler[0] == attachedHandler.nHandler.selector[0] ) {
                        var rowPos = selectedElement.offset();
                        var height = selectedElement.height();
                        var bottom = rowPos.top + height;
                        table.find('td').each(function(index, td) {
                            var rowPos2 = $(td).offset();
                            var height2 = $(td).height();
                            var bottom2 = rowPos2.top + height2;
                            if ( bottom2 == bottom || bottom2 + 5 > bottom && bottom2 - 5 < bottom ) {
                                rowTarget[rowIndexing] = td;
                                rowIndexing++;
                            }
                        });
                        $(rowTarget).each(function(index, td) {
                            var rowspan = $(td).attr('rowspan') ? parseInt($(td).attr('rowspan'), 10) : 1;
                            if ( rowspan == 1 ) {
                                sorted = td;
                                return false;
                            }
                        });
                    } else {
                        // DJ : if an user trying to resize horizontally
                        var colPos = selectedElement.offset();
                        var width = selectedElement[0].clientWidth;
                        var right = colPos.left + width;
                        table.find('td').each(function(index, td) {
                            var colPos2 = $(td).offset();
                            var width2 = td.clientWidth;
                            var right2 = colPos2.left + width2;
                            if ( right2 == right || right2 + 5 > right && right2 - 5 < right ) {
                                resizeTarget[targetIndexing] = td;
                                targetIndexing++;
                            }
                        });

                        // DJ : Try resizing the right next one
                        var colPos3 = selectedElement.offset();
                        var width3 = selectedElement[0].clientWidth;
                        var right3 = colPos3.left + width3;
                        table.find('td').each(function(index, td) {
                            var colPos4 = $(td).offset();
                            var width4 = td.clientWidth;
                            var right4 = colPos4.left + width4;
                            if ( colPos4.left >= right3 - 10 && colPos4.left <= right3 + 10 ) {
                                nextTarget[nextIndexing] = td;
                                nextIndexing++;
                            }
                        });
                    }

                    $(resizeTarget).each(function(index, td) {
                        var colspan = $(td).attr('colspan') ? true : false;
                        if ( colspan != true ) {
                            selected = $(td);
                            return false;
                        };
                    });

                    $(nextTarget).each(function(index, td) {
                        var colspan = $(td).attr('colspan') ? true : false;
                        if ( colspan != true ) {
                            nextSelected = $(td);
                            return false;
                        };
                    });

                    if ( selected == undefined ) {
                        selected = selectedElement;
                    }

				            // DJ : Invoked if an user is moving cursor while mousedowning.
				            // This is where the actual calculation for resize is being made.
                    $(parentElement.Contents).mousemove(function(e) {
                        parentElement.Contents.attr('contentEditable', false).css('cursor', currentHandler.css('cursor'));
                        
                        var position;
                        var resized;
                        var width;
                        position = $(selected).offset();

                        if ( currentHandler[0] == attachedHandler.eHandler.selector[0] )
                        {
                            if ( e.pageX <= position.left + settings.thick || e.pageX >= position.left + selected.width() + (nextSelected ? nextSelected.width() : 100) - settings.thick)
                            {
                                console.log('resized limits');
                            } else {
                                width = selected.width();
                                resized = position.left + width - e.pageX;
                                attachedHandler.eHandler.selector.css('left', e.pageX - leverage);
                                attachedHandler.nHandler.selector.css('width',width - resized );
                                $(resizeTarget).each(function(ind, td) {
                                    $(td).css('width', parseInt(td.style.width, 10) - parseInt(resized, 10));
                                });
                                if ( selected.next()[0] != undefined ) {
                                    $(nextTarget).each(function(ind, td) {
                                        $(td).css('width', parseInt(td.style.width, 10) + parseInt(resized, 10));
                                    });
                                } else {
                                    table.css('width', parseInt(table.outerWidth(), 10) - parseInt(resized, 10));
                                }
                            }
                        } else {
                            position = $(sorted).offset();
                            resized = position.top + $(sorted).outerHeight() - e.pageY;
                            attachedHandler.nHandler.selector.css('top', e.pageY);
                            attachedHandler.eHandler.selector.css('height', $(sorted).outerHeight() - resized );
                            $(rowTarget).css('height', $(sorted).outerHeight() - resized );
                        }
                    });
                
					          // DJ : Mouse up event.
                    parentElement.Contents.mouseup(function(e) {
                        methods.applyChanges();
                        methods.resizeEnd(selectedElement);
                    });
                
                    // DJ : Mouse leave event.
                    parentElement.Contents.unbind('mouseleave').bind('mouseleave', function(e) {
                        methods.applyChanges();
                        methods.resizeEnd(selectedElement);
                    });
                    
                    //DJ : Event for mouse to leave from toolbar and editor area.
                    parentElement.Editor.unbind('mouseleave').bind('mouseleave', function(e) {
                        //$(selectedElement.context.offsetParent).attr('fixed', 'false');
                        //methods.fixedValue(selectedElement, $(selectedElement.context.offsetParent));
                        methods.applyChanges();
                        methods.resizeEnd(selectedElement);
                    });
				        },

                // DJ : Resize process ends, initializing all.
                resizeEnd: function(selectedElement) {
                    $(selectedElement.context.offsetParent).attr('fixed', 'false');
                    methods.fixedValue(selectedElement, $(selectedElement.context.offsetParent));
                    parentElement.Contents.attr('contentEditable', true).css('cursor', 'auto');                    
                    targetIndexing = 0;
                    nextIndexing = 0;
                    rowIndexing = 0;
                    isHandler = false;
                    resizingStatus = false;
                    selectedElement = undefined;
                    attachedHandler.eHandler.selector.unbind('mousedown');
                    attachedHandler.eHandler.selector.unbind('mouseup');
                    attachedHandler.eHandler.selector.unbind('mouseenter');
                    attachedHandler.eHandler.selector.unbind('mouseout');
                    attachedHandler.nHandler.selector.unbind('mousedown');
                    attachedHandler.nHandler.selector.unbind('mouseup');
                    attachedHandler.nHandler.selector.unbind('mouseenter');
                    attachedHandler.nHandler.selector.unbind('mouseout');
                    attachedHandler.eHandler.selector.remove();
                    attachedHandler.nHandler.selector.remove();
                    parentElement.Contents.unbind('mousemove');
                    parentElement.Contents.unbind('mouseup');
                },

                // DJ : Update the changes that have been made.
                applyChanges: function() {
                    attachedHandler.eHandler.selector.remove();
                    attachedHandler.nHandler.selector.remove();
                    parentElement.Jquery.parents('.fieldContaner').trigger('change');
                }
            }
            
            // DJ : After a table is completely loaded and an user put a mouse on a target element, plugin starts.
            parentElement.Contents.on("mouseover", settings.selector, function(e) {
                if ( e.target.localName == settings.selector || e.target.tagName.toLowerCase() == settings.selector ) {
                    if ( $(e.target.offsetParent).attr('fixed') != 'true' ) {
                        methods.fixedValue(selectedElement, e.target.offsetParent);
                    } else if ( parentElement.Contents.find(attachedHandler.eHandler.id).length == 0 ) {
                        methods.getContents(parentElement, e.target);
                    } else if ( resizingStatus != true ) {
                        selectedElement = $(e.target);
                        methods.positionHandler(selectedElement);
                    }
                }
            });
        });
    };
})(jQuery);
